#!/usr/bin/env python

import sys
import argparse

import spglib
import seekpath

from pymatgen.core.structure import Structure
from pymatgen.symmetry.analyzer import SpacegroupAnalyzer

"""
Script to generate the standardised primitive cell structure

Some notes:
  - The "standard" is based on: https://doi.org/10.1016/j.commatsci.2016.10.015
  - Pymatgen is used for loading files and calculating the symmetry info
  - Seekpath is used to generate the standard primitive cell as the pymatgen
    "standard" is at odds to Bradley & Cracknell and other conventions
  - Don't use spglib.find_primitive, as the find_primitive method follows a
    different convention for mC and oA as explained in the above paper
"""

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', help='path to input file',
                    default='POSCAR', type=str)
parser.add_argument('-t', '--tol', help='symmetry tolerance (default 1e-3)',
                    default=1e-3, type=float)
parser.add_argument('-o', '--output', help='output file format',
                    default='poscar')
args = parser.parse_args()

struct = Structure.from_file(args.file)
sym = SpacegroupAnalyzer(struct, symprec=args.tol)
data = sym.get_symmetry_dataset()

print "Initial structure has {} atoms".format(struct.num_sites)
print "\tSpace group number: {}".format(data['number'])
print "\tInternational symbol: {}".format(data['international'])
print "\tLattice type: {}".format(sym.get_lattice_type())

# first standardise the cell using the tolerance we want (seekpath has no 
# tolerance setting)
std = spglib.standardize_cell(sym._cell, symprec=args.tol)

# sadly the quickest way to get the data we need
seek_data = seekpath.get_path(std)

# now remake the structure
lattice = seek_data['primitive_lattice']
scaled_positions = seek_data['primitive_positions']
numbers = seek_data['primitive_types']
species = [sym._unique_species[i - 1] for i in numbers]
prim = Structure(lattice, species, scaled_positions)
prim.to(filename="{}_prim".format(args.file), fmt=args.output)

print "Final structure has {} atoms".format(prim.num_sites)
