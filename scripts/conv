#!/usr/bin/env python

import sys
import argparse
import spglib

from pymatgen.core.structure import Structure
from pymatgen.symmetry.analyzer import SpacegroupAnalyzer

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', help='path to input file', default='POSCAR',
                    type=str)
parser.add_argument('-t', '--tol', help='symmetry tolerance (default 1e-3)',
                    default=1e-3, type=float)
parser.add_argument('-o', '--output', help='output file format',
                    default='poscar')
args = parser.parse_args()

struct = Structure.from_file(args.file)
sym = SpacegroupAnalyzer(struct, symprec=args.tol)
data = sym.get_symmetry_dataset()

print "Initial structure has {} atoms".format(struct.num_sites)
print "\tSpace group number: {}".format(data['number'])
print "\tInternational symbol: {}".format(data['international'])
print "\tLattice type: {}".format(sym.get_lattice_type())

# pymatgen conv definition differnt from spglib
lattice, scaled_positions, numbers = spglib.standardize_cell(
        sym._cell, symprec=args.tol)
species = [sym._unique_species[i - 1] for i in numbers]
conv = Structure(lattice, species, scaled_positions)
conv.get_sorted_structure().to(filename="{}_conv".format(args.file), 
                               fmt=args.output)

print "Final structure has {} atoms".format(conv.num_sites)
